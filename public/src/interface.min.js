const body=document.getElementsByTagName('body')[0];
const rootURL=window.location.protocol+'//'+window.location.host;
const assetsURL='';
const iconURL='';
let a=rootURL+'/api';
const c="";
//
let name=' - Godview';

let menuCollapse=false;
let styleData={
    rowAlternateBackgroundColor:'#FAFAFA',
    rowFocusedCellWidth:'2px',
    mapStyleOSM:rootURL+"/godview_light.json",
};
if(window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    //
    styleData.rowAlternateBackgroundColor='#26354A';
    styleData.mapStyleOSM=rootURL+"/godview_dark.json";
}// A: API
class A  {
    //
    static r(method,path,payload,callback) {
        let request=new XMLHttpRequest();
        request.onreadystatechange=()=>{
            if(request.readyState===4 && request.status===200) {
                let responseData=JSON.parse(request.responseText);
                callback(responseData.error,responseData.data);
            }
        };
        //
        request.open(method,a+path,true);
        request.setRequestHeader('Content-Type','application/json');
        request.setRequestHeader('Access-Control-Allow-Headers','*');
        //request.setRequestHeader('Authorization','Bearer '+c);
        request.send(JSON.stringify(payload));
    }
}

// E: Elements
class E {
    static get(id) {
        return document.getElementById(id);
    };
    static fetch(type,value) {
        let e;
        switch(type) {
            case 'className':
                e=document.getElementsByClassName(value);
                break;
            case 'tagName':
                e=document.getElementsByTagName(value);
                break;
        }
        return e;
    }
    static fetch2(parent,type,value) {
        let e;
        switch(type) {
            case 'className':
                e=parent.getElementsByClassName(value);
                break;
            case 'tagName':
                e=parent.getElementsByTagName(value);
                break;
        }
        return e;
    }
    static bool(e) {
        let val;
        if(e.checked===true) val=1;
        if(e.checked===false) val=0;
        return val;
    };
    static script(parent,src) {
        let e=document.createElement('div');
        parent.appendChild(e);
        e.src=src;
        return e;
    };

    static div(parent,className,id) {
        let e=document.createElement('div');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        return e;
    };
    static span(parent,className,id) {
        let e=document.createElement('span');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        return e;
    };
    static form(parent,method) {
        let e=document.createElement('form');
        parent.appendChild(e);
        e.method=method;
        return e;
    };
    static a(parent,className,id,href,target) {
        let e=document.createElement('a');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        e.href=href;
        e.target=target;
        return e;
    };
    static table(parent,className,id,align,width) {
        let e=document.createElement('table');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        e.align=align;
        e.width=width;
        return e;
    };
    static tableR(table) {
        return table.insertRow(table.rows.length);
    };
    static tableC(tr,width) {
        let e=tr.insertCell(tr.cells.length);
        e.width=width;
        return e;
    };
    static tableC2(tr,width,style) {
        let e=tr.insertCell(tr.cells.length);
        e.width=width;
        e.style.background=style.background;
        return e;
    };
    static tableH(tr,width) {
        let e=document.createElement('th');
        tr.appendChild(e);
        e.width=width;
        return e;
    };
    static tableH2(tr,colspan) {
        let e=document.createElement('th');
        tr.appendChild(e);
        e.colSpan=colspan;
        return e;
    };
    static tableHV(tr,rowspan) {
        let e=document.createElement('th');
        tr.appendChild(e);
        e.rowSpan=rowspan;
        return e;
    };
    static img(parent,className,id,src) {
        let e=document.createElement('img');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        e.src=src;
        return e;
    };
    static video(parent,className,id,src) {
        let e=document.createElement('video');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        e.innerHTML="<source src='"+src+"' type='video/mp4'>";
        e.setAttribute("width", "1000");
        e.setAttribute("height", "450");
        e.setAttribute("controls", "controls");
        return e;
    };
    static canvas(parent,className,id,width,height) {
        let e=document.createElement('canvas');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        e.width=width;
        e.height=height;
        e.style.width=width;
        e.style.height=height;
        return e;
    };

    static input(parent,type,className,id,placeholder) {
        let e=document.createElement('input');
        parent.appendChild(e);
        e.type=type;
        e.className=className;
        e.id=id;
        e.placeholder=placeholder;
        return e;
    };
    static textarea(parent,className,id,placeholder) {
        let e=document.createElement('textarea');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        e.placeholder=placeholder;
        return e;
    };
    static button(parent,className,id,text) {
        let e=document.createElement('button');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        e.innerHTML=text;
        return e;
    };
    static select(parent,className,id,options) {
        let e=document.createElement('select');
        parent.appendChild(e);
        e.className=className;
        e.id=id;
        if(options.length>0) {
            for(let i=0;i<options.length;i++) {
                let o=document.createElement('option');
                o.innerHTML=options[i].text;
                o.value=options[i].value;
                if(options[i].selected===1) o.selected=true;
                e.add(o);
            }
        }
        return e;
    };
    static option(parent,value,text) {
        let e=document.createElement('option');
        e.value=value;
        e.innerHTML=text;
        parent.add(e);
        return e;
    };
    static toggle(parent,className,id) {
        let l=document.createElement('label');
        parent.appendChild(l);
        l.className='switch';
        let e=document.createElement('input');
        l.appendChild(e);
        e.type='checkbox';
        e.className=className;
        e.id=id;
        let s=document.createElement('span');
        l.appendChild(s);
        s.className='slider';
        return e;
    };
    static checkbox(parent,className,id) {
        let e=document.createElement('input');
        parent.appendChild(e);
        e.type='checkbox';
        e.className=className;
        e.id=id;
        return e;
    };
    static radio(parent,className,id,name,value) {
        let e=document.createElement('input');
        parent.appendChild(e);
        e.type='radio';
        e.className=className;
        e.id=id;
        e.name=name;
        e.value=value;
        return e;
    };
    static file(parent,id,name) {
        let e=document.createElement('input');
        parent.appendChild(e);
        e.type='file';
        e.className='fileField';
        e.id=id;
        e.name=name;
        return e;
    };
}

// T: Texts
class T {

    // parse nulls
    static t(text) {
        if(!text) return '';
        if(text==='null') return '';
        if(text==null || text=='') return '';
        if(typeof text===undefined) return '';
        else return text;
    };

    static nullFloat(text) {
        if(!text) return '0.00';
        if(text==='null') return '0.00';
        if(text==null || text=='') return '0.00';
        if(typeof text===undefined) return '0.00';
        else return text;
    };

    // shorten text
    static s(text,limit) {
        if(text===null) return "";
        if(text.split("").length>limit) return text.substr(0,limit)+" ...";
        else return text;
    };

    // check empty
    static e(text) {
        if(text===null || text==='' || !text) return true;
        else return false;
    }

    static e404(url) {
        let http = new XMLHttpRequest();
        http.open('HEAD', url, false);
        http.send();
        if(http.status===404) return true;
        else return false;
    };

    static yn(val) {
        if(parseInt(val)===1) return 'YES';
        else return 'NO';
    };

    static nullOrNot(val) {
        if(val) return 'YES';
        else return 'NO';
    };

    static finishTime(startTime,hours) {
        let today=new Date(startTime).getTime()/1000;
        let nextDate=today+(hours*3600);
        let finishTime=new Date(nextDate*1000);
        return finishTime.toLocaleString('en-US',{hour:'numeric',minute:'numeric',hour12:true});
    };

    static isPrimary(isPrimary) {
        if(isPrimary===1) return '<span class="contentListTag contentListTagGreen">Primary</span>';
        else return '<span class="contentListTag">Backup</span>';
    };
    static active(active) {
        if(active===1) return '<span class="contentListTag contentListTagGreen">Active</span>';
        else return '<span class="contentListTag">Inactive</span>';
    };
    static required(required) {
        if(required===1) return 'Required';
        else return 'Optional';
    };
    static tagColor(hexColor) {
        const hex = hexColor.replace('#', '');
        const c_r = parseInt(hex.substr(0, 2), 16);
        const c_g = parseInt(hex.substr(2, 2), 16);
        const c_b = parseInt(hex.substr(4, 2), 16);
        const brightness = ((c_r * 299) + (c_g * 587) + (c_b * 114)) / 1000;
        //return brightness > 155;
        if((brightness < 155)) return '#FFFFFF';
        else return '#222222';
    };
    static isMe(userId) {
        if(userId===currentUser.id) return ' <span class="contentListTag">Me</span>';
        else return '';
    };
    static isOwner(isOwner) {
        if(parseInt(isOwner)===1) return ' <span class="contentListTag">Owner</span>';
        else return '';
    };

    static isAdmin(isAdmin) {
        if(parseInt(isAdmin)===1) return ' <span class="contentListTag">Admin</span>';
        else return '';
    };
    static isCurrent(isCurrent) {
        if(parseInt(isCurrent)===1) return ' <span class="contentListTag">This Session</span>';
        else return '';
    };
    static isDefault(isDefault) {
        if(parseInt(isDefault)===1) return ' <span class="contentListTag">Default</span>';
        else return '';
    };
    static sourceMethod(method) {
        if(method) return '<span class="contentListTag">'+method.toUpperCase()+'</span> ';
        else return '';
    };
    static isObjectEmpty(obj) {
        for(const prop in obj) {
            if(Object.hasOwn(obj,prop)) {
                return false;
            }
        }
        return true;
    }
    static hasParam(obj,param) {
        if(obj) {
            if(obj[param]) return obj[param];
        }
        return 'n/a';
    }
}

// H: Human
class H {
    //y-m-d
    static date(date) {
        let parts=date.match(/(\d+)/g);
        let start=new Date(parts[0],parts[1]-1,parts[2]);
        return start.getMonth()+1+'/'+start.getDate();
    };

    // hh:mm
    static time(time) {
        let c;
        let a=parseInt(time.substr(-time.length,2));
        let b=time.substr(3,2);
        if(a<12) c='am';
        else {
            c='pm';
            if(a===13) a=1;
            if(a===14) a=2;
            if(a===15) a=3;
            if(a===16) a=4;
            if(a===17) a=5;
            if(a===18) a=6;
            if(a===19) a=7;
            if(a===20) a=8;
            if(a===21) a=9;
            if(a===22) a=10;
            if(a===23) a=11;
        }
        return a+':'+b+c;
    };

    // timestamp
    static casDate(timestamp) {
        if(!timestamp || timestamp===0 || timestamp===null || timestamp==='') return '';
        timestamp=timestamp*1000;
        let m=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        let start=new Date(timestamp);
        return m[start.getMonth()]+' '+start.getDate()+', '+start.getFullYear();
    };

    // y-m-d
    static casDate2(date) {
        let parts=date.match(/(\d+)/g);
        let m=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        let start=new Date(parts[0],parts[1]-1,parts[2]);
        return m[start.getMonth()]+' '+start.getDate()+', '+start.getFullYear();
    };

    // timestamp
    static casDateTime(timestamp) {
        if(!timestamp || timestamp===0 || timestamp===null || timestamp==='') return '';
        timestamp=timestamp*1000;
        let m=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        let start=new Date(timestamp);
        let a,i,t=start.getHours();
        if(start.getHours()<12) a='am';
        else {
            a='pm';
            if(t===13) t=1;
            if(t===14) t=2;
            if(t===15) t=3;
            if(t===16) t=4;
            if(t===17) t=5;
            if(t===18) t=6;
            if(t===19) t=7;
            if(t===20) t=8;
            if(t===21) t=9;
            if(t===22) t=10;
            if(t===23) t=11;
        }
        if(start.getMinutes()<10) {
            i='0'+start.getMinutes();
        }
        else i=start.getMinutes();
        return m[start.getMonth()]+' '+start.getDate()+', '+start.getFullYear()+' - '+t+':'+i+' '+a;
    };

    static casTime(timestamp) {
        if(!timestamp || timestamp===0 || timestamp===null || timestamp==='') return '';
        timestamp=timestamp*1000;
        let m=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        let start=new Date(timestamp);
        let a,i,t=start.getHours();
        if(start.getHours()<12) a='am';
        else {
            a='pm';
            if(t===13) t=1;
            if(t===14) t=2;
            if(t===15) t=3;
            if(t===16) t=4;
            if(t===17) t=5;
            if(t===18) t=6;
            if(t===19) t=7;
            if(t===20) t=8;
            if(t===21) t=9;
            if(t===22) t=10;
            if(t===23) t=11;
        }
        if(start.getMinutes()<10) {
            i='0'+start.getMinutes();
        }
        else i=start.getMinutes();
        return t+':'+i+' '+a;
    };

    // timestamp
    static boolDate(timestamp) {
        if(!timestamp || timestamp===0 || timestamp===null || timestamp==='') return 'NO';
        timestamp=timestamp*1000;
        let m=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        let start=new Date(timestamp);
        let a,i,t=start.getHours();
        if(start.getHours()<12) a='am';
        else {
            a='pm';
            if(t===13) t=1;
            if(t===14) t=2;
            if(t===15) t=3;
            if(t===16) t=4;
            if(t===17) t=5;
            if(t===18) t=6;
            if(t===19) t=7;
            if(t===20) t=8;
            if(t===21) t=9;
            if(t===22) t=10;
            if(t===23) t=11;
        }
        if(start.getMinutes()<10) {
            i='0'+start.getMinutes();
        }
        else i=start.getMinutes();
        return 'YES ['+m[start.getMonth()]+' '+start.getDate()+', '+start.getFullYear()+' - '+t+':'+i+' '+a+']';
    };

    static fileSize(bytes) {
        let decimals=2;
        if (!+bytes) return '0 Bytes'

        const k = 1024
        const dm = decimals < 0 ? 0 : decimals
        const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']

        const i = Math.floor(Math.log(bytes) / Math.log(k))

        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`
    }

    static numberNotation(number,metricAttributes) {
        if(metricAttributes && metricAttributes.notation==='short') {
            let decimals=1;
            if (!+number) return '0'

            const k = 1000
            const dm = decimals < 0 ? 0 : decimals
            const sizes = ['', 'K', 'M', 'B']

            const i = Math.floor(Math.log(number) / Math.log(k))

            return `${parseFloat((number / Math.pow(k, i)).toFixed(dm))}${sizes[i]}`
        }
        else return number;
    }
}

// I: Interface
class I {
    static confirmFloater(e,callback) {
        //I.hideFloaters();
        let p=e.target.getBoundingClientRect();
        let m=E.div(body,'floaterMenu','');
        m.style.top=p.top+window.scrollY+15+'px';
        m.style.left=p.left+window.scrollX-160+'px';
        let b=E.div(m,'floaterMenuButton floaterMenuButtonRed','');
        b.innerHTML='<i class="fa-solid fa-triangle-exclamation"></i> Confirm';
        b.onclick=()=>{
            callback(true);
            I.hideFloaters();
        };
    };
    static error(e) {
        let box=E.div(body,'','notificationBox');
        box.style.background='#E83A3A';
        box.style.visibility='visible';
        box.style.right='25px';
        box.innerHTML='<i class="fa-solid fa-triangle-exclamation"></i> '+e;
        setTimeout(()=>{
            box.style.right='-500px';
        },4000);
    };
    static success(m) {
        let box=E.div(body,'','notificationBox');
        box.style.background='#35C185';
        box.style.visibility='visible';
        box.style.right='25px';
        box.innerHTML='<i class="fa-solid fa-circle-check"></i> '+m;
        setTimeout(()=>{
            box.style.right='-500px';
        },4000);
    };
    static info(m) {
        let box=E.div(body,'','notificationBox');
        box.style.background='#444444';
        box.style.visibility='visible';
        box.style.right='25px';
        box.innerHTML='<i class="fa-solid fa-square-info"></i> '+m;
        setTimeout(()=>{
            box.style.right='-500px';
        },4000);
    };
    //
    static menu() {
        if(!E.get('menu')) {
            E.img(body,'','logo',rootURL+'/logo.png');
            E.div(body,'','wordmark').innerHTML='Godview';
            let support=E.div(body,'','help');
            support.innerHTML='Support';
            support.onclick=()=>{
                window.open('https://bpy5wgfcbq8.typeform.com/to/XAvPKt85','_blank');
            };
            E.div(body,'','notice').innerHTML='<i class="fa-solid fa-circle-info"></i> A.I. can make mistakes.';
            
            
            let menu=E.div(body,'','menu');
            let search=E.div(menu,'menuItem','');
            search.innerHTML='Search';
            let discover=E.div(menu,'menuItem','');
            discover.innerHTML='Discover';

            let currentPath=window.location.pathname.split('/');
            if(!currentPath[1] || currentPath[1]==='search') search.className='menuItem menuItemActive';
            else if(currentPath[1]==='discover') discover.className='menuItem menuItemActive';
            
            search.onclick=()=>{
                window.location.assign(rootURL+'/search');
            };
            discover.onclick=()=>{
                window.location.assign(rootURL+'/discover');
            };
        }
    };
    static hideFloaters() {
        for(let x=0;x<E.fetch2(body,'className','floaterMenu').length;x++) {
            body.removeChild(E.fetch2(body,'className','floaterMenu')[x]);
        }
        for(let x=0;x<E.fetch2(body,'className','floaterWhatis').length;x++) {
            body.removeChild(E.fetch2(body,'className','floaterWhatis')[x]);
        }
    };
    //
}

window.onpopstate=(e)=>{
    if(e && e.state) location.reload();
};let historyData=[];
let navShowing=false;
let myLocation=false;
let defaultModel="anthropic";
let modelOptions=[
    {value:'anthropic',provider:'Anthropic',model:'sonnet-3.5',text:'Sonnet 3.5'},
    {value:'deepseek',provider:'DeepSeed',model:'deepseek-v3',text:'DeepSeek v3'},
    {value:'openai',provider:'Open AI',model:'gpt-4o',text:'GPT-4o'},
    {value:'local',provider:'Local',model:'Local',text:'Local'},
];
let selectedModel=modelOptions[0];
//

var discoverHistoryData=[];
var lat,long,map;
var cursorEnabled=true;
var popups=[];


class MapInterface extends I {
    static map() {
        // branding
        E.img(body,'','logo','src/logo.png');
        E.div(body,'','wordmark').innerHTML='Godview';
        let support=E.div(body,'','help');
        support.innerHTML='Support';
        support.onclick=()=>{
            window.open('https://bpy5wgfcbq8.typeform.com/to/XAvPKt85','_blank');
        };
        E.div(body,'','notice').innerHTML='<i class="fa-solid fa-circle-info"></i> A.I. can make mistakes.';

        //
        // menu
        let menu=E.div(body,'','menu');
        let search=E.div(menu,'menuItem','');
        search.innerHTML='Search';
        let discover=E.div(menu,'menuItem','');
        discover.innerHTML='Discover';

        //
        // map
        E.div(body,'','mapBox'); // create map div
        map=new mapboxgl.Map({
            container:'mapBox',
            style:'mapbox://styles/mapbox/light-v11',
            center:[-73.9856,40.7128],
            zoom:3,
            projection: 'globe'
        });
        
        // Add atmosphere and fog for globe view
        map.on('style.load', () => {
            // Add atmosphere layer
            map.setFog({
                'color': 'rgb(186, 210, 235)',
                'high-color': 'rgb(36, 92, 223)',
                'horizon-blend': 0.02,
                'space-color': 'rgb(11, 11, 25)',
                'star-intensity': 0.6
            });
        });
        
        //
        MapInterface.search(); //initialize search tab
        MapInterface.discover(); //initialize discover tab

        //
        let currentPath=window.location.pathname.split('/');
        if(!currentPath[1] || currentPath[1]==='search') enableSearch();
        else if(currentPath[1]==='discover') enableDiscover();
        //
        function enableSearch() {
            let title='Search | Godview',url='search';
            document.getElementsByTagName('title')[0].innerHTML=title;
            history.pushState({title:title,url:url},title,rootURL+'/'+url);
            search.className='menuItem menuItemActive';
            discover.className='menuItem';
            //
            if(E.get('discoverBox')) E.get('discoverBox').style.display='none';
            //
            if(E.get('searchPrompt')) E.get('searchPrompt').style.display='block';
            if(E.get('searchHistory')) E.get('searchHistory').style.display='block';
            if(E.get('searchCards')) {
                if(window.innerWidth<=900) E.get('searchCards').style.display='flex';
                else E.get('searchCards').style.display='block';
            }
            window.onresize=(event)=>{
                if(E.get('searchCards')) {
                    if(window.innerWidth<=900) E.get('searchCards').style.display='flex';
                    else E.get('searchCards').style.display='block';
                }
            };
            cursorEnabled=false;
        }
        function enableDiscover() {
            let title='Discover | Godview',url='discover';
            document.getElementsByTagName('title')[0].innerHTML=title;
            history.pushState({title:title,url:url},title,rootURL+'/'+url);
            search.className='menuItem';
            discover.className='menuItem menuItemActive';
            //
            if(E.get('discoverBox')) E.get('discoverBox').style.display='block';
            //
            if(E.get('searchPrompt')) E.get('searchPrompt').style.display='none';
            if(E.get('searchHistory')) E.get('searchHistory').style.display='none';
            if(E.get('searchCards')) E.get('searchCards').style.display='none';
            cursorEnabled=true;
        }
        //
        search.onclick=()=>{
            enableSearch();
        };
        discover.onclick=()=>{
            enableDiscover();
        };
    };
    //
    static search() {
        // prompt
        let promptBox=E.div(body,'','searchPrompt');
        let promptTable=E.table(promptBox,'','','center','100%');
        let tr1=E.tableR(promptTable);
        let field=E.input(E.tableC(tr1,'90%'),'text','','promptField','Eg: "show me 5 soccer fields in NYC"');
        E.tableC(tr1,'10%');
        //
        let tr2=E.tableR(promptTable);
        let optBox=E.div(E.tableC(tr2,'90%'),'promptOptionsBox','');
        let locate=E.div(optBox,'promptOptions','locate');
        locate.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-location-arrow"></i></span> <span class="promptOptText">Locate Me</span>';
        locate.title='Locate me.';
        let model=E.div(optBox,'promptOptions','model');
        model.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-brain-circuit"></i></span> <span class="promptOptText">'+selectedModel.text+'</span>';
        model.title='Select model.';
        model.onclick=()=>{
            if(modelOptions.findIndex(x=>x.value===selectedModel.value)<modelOptions.length-1) selectedModel=modelOptions[modelOptions.findIndex(x=>x.value===selectedModel.value)+1];
            else selectedModel=modelOptions[0];
            model.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-brain-circuit"></i></span> <span class="promptOptText">'+selectedModel.text+'</span>';
            document.cookie="gv2_mdl=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
            document.cookie='gv2_mdl='+selectedModel.value+'; expires=Sun, 24 May 2080 12:00:00 UTC; path=/;';
        };
        let cookies=document.cookie.split(";");
        let foundMdl=false;
        for(let i=0;i<cookies.length;i++) {
            if(cookies[i].indexOf("gv2_mdl")>-1) foundMdl=cookies[i].split("=")[1];
        }
        if(foundMdl) {
            selectedModel=modelOptions[modelOptions.findIndex(x=>x.value===foundMdl)];
            model.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-brain-circuit"></i></span> <span class="promptOptText">'+selectedModel.text+'</span>';
        }
        //
        let buttonBox=E.tableC(tr2,'10%');
        let button=E.button(buttonBox,'','promptButton','<i class="fa-solid fa-arrow-up"></i>');
        let loading=E.img(buttonBox,'','promptLoad','src/loading2.gif');
        //
        promptBox.style.top=window.innerHeight-215+'px';
        //

        // history
        let history=E.div(body,'','searchHistory');
        E.div(history,'','historyTitle').innerHTML='History';
        E.table(history,'','historyTable','center','90%');

        //
        E.div(body,'','searchCards');
        //

        locate.onclick=()=>{
            if("geolocation" in navigator) {
                if(!myLocation || !myLocation.latitude || !myLocation.longitude) {
                    navigator.geolocation.getCurrentPosition((position)=>{
                        new mapboxgl.Marker({color: '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0')})
                            .setLngLat([position.coords.longitude,position.coords.latitude])
                            .setPopup(new mapboxgl.Popup().setHTML('<div class="pointName">My Location</div><div class="pointAddress"></div><div class="pointLatLong">Lat,Long: '+position.coords.latitude.toFixed(2)+', '+position.coords.longitude.toFixed(2)+'</div>'))
                            .addTo(map);
                        map.panTo([position.coords.longitude,position.coords.latitude]);
                        myLocation={latitude:position.coords.latitude,longitude:position.coords.longitude};
                    });
                }
                else map.panTo([myLocation.longitude,myLocation.latitude]);
            }
        };

        field.onkeydown=(e)=>{
            if(e.keyCode===13) prompt();
        };
        button.onclick=()=>{
            prompt();
        };
        function prompt() {
            button.style.display='none';
            loading.style.display='block';
            A.r('POST','/query',{prompt:field.value,myLocation:myLocation,model:selectedModel.value},(error,data)=>{
                loading.style.display='none';
                button.style.display='block';
                history.style.visibility='visible';
                if(!error) {
                    //
                    let hex='#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');
                    SearchInterface.history(map,field.value,hex);
                    historyData.push({hex:hex,markers:[],data:[]});
                    //
                    if(!navShowing && window.innerWidth>500) {
                        let nav=new mapboxgl.NavigationControl({
                            showZoom:true,
                            showCompass:true,
                            visualizePitch:true
                        });
                        map.addControl(nav,'bottom-left');
                        navShowing=true;
                    }
                    //
                    field.value='';
                    if(data && data.length>0) {
                        E.get('searchCards').innerHTML='';
                        data.forEach((dataItem,i)=>{
                            SearchInterface.point(map,dataItem,hex);
                            SearchInterface.card(map,dataItem,hex,i);
                            if(i===data.length-1) {
                                if(parseInt(map.getZoom())<2) map.flyTo({center:[dataItem.longitude,dataItem.latitude],zoom:7,duration:1500,essential:true});
                                else map.panTo([dataItem.longitude,dataItem.latitude]);
                            }
                        });
                    }
                }
                else I.error(error);
            });
        }
        //
    };
    static discover() {
        //
        let discoverBox=E.div(body,'','discoverBox');
        let optBox=E.div(discoverBox,'','discoverOptBox');
        let resultsBox=E.div(discoverBox,'','discoverResultsBox');
        E.div(resultsBox,'','discoverResultsInfo').innerHTML='<i class="fa-regular fa-circle-info"></i> Click on any point on the map to learn about the location.';
        let optBox2=E.div(optBox,'','discoverOptButtonBox');
        let model=E.div(optBox2,'promptOptions','model');
        model.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-brain-circuit"></i></span> <span class="promptOptText">'+selectedModel.text+'</span>';
        model.title='Select model.';
        model.onclick=()=>{
            if(modelOptions.findIndex(x=>x.value===selectedModel.value)<modelOptions.length-1) selectedModel=modelOptions[modelOptions.findIndex(x=>x.value===selectedModel.value)+1];
            else selectedModel=modelOptions[0];
            model.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-brain-circuit"></i></span> <span class="promptOptText">'+selectedModel.text+'</span>';
        };
        let cursor=E.div(optBox2,'promptOptions','model');
        cursor.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-arrow-pointer"></i></span> <span class="promptOptText">Cursor Enabled</span>';
        cursor.title='Toggle cursor.';
        cursor.onclick=()=>{
            switch(cursorEnabled) {
                case true:
                    cursorEnabled=false;
                    cursor.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-arrow-pointer"></i></span> <span class="promptOptText">Cursor Disabled</span>';
                    break;
                case false:
                    cursorEnabled=true;
                    cursor.innerHTML='<span class="promptOptIcon"><i class="fa-solid fa-arrow-pointer"></i></span> <span class="promptOptText">Cursor Enabled</span>';
                    break;
            }
        };
        //
        map.on('click',(e)=>{
            if(cursorEnabled) {
                let coordinates=e.lngLat;
                lat=parseFloat(e.lngLat.wrap().lat).toFixed(4);
                long=parseFloat(e.lngLat.wrap().lng).toFixed(4);
                let popup=new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setHTML('<div class="discoverButtonInfo">Coordinates:<br/>['+lat+', '+long+']</div><button class="discoverButton" onclick="DiscoverInterface.prompt();"><i class="fa-solid fa-comment"></i> Disover Location</button>')
                    .addTo(map);
                popups.push(popup);
            }
        });

        //
    };
}

class SearchInterface extends I {
    static point(map,pointData,hex) {
        let m=new mapboxgl.Marker({color: hex})
            .setLngLat([pointData.longitude,pointData.latitude])
            .setPopup(new mapboxgl.Popup().setHTML('<div class="pointName">'+pointData.name+'</div><div class="pointAddress">'+pointData.address+'</div><div class="pointLatLong">Lat,Long: '+pointData.latitude+', '+pointData.longitude+'</div>'))
            .addTo(map);
        historyData[historyData.findIndex(x=>x.hex===hex)].markers.push(m);
        historyData[historyData.findIndex(x=>x.hex===hex)].data.push(pointData);
    };
    static card(map,pointData,hex,i) {
        let box=E.div(E.get('searchCards'),'cardItem','');
        E.div(box,'cardName cardText','').innerHTML=pointData.name;
        E.div(box,'cardAddress cardText','').innerHTML=pointData.address;
        if(pointData.url) {
            let url=E.div(E.a(box,'','',pointData.url,'_blank'),'cardIcon','');
            let parseUrl=new URL(pointData.url);
            url.innerHTML='<i class="fa-light fa-link"></i> '+parseUrl.host;
        }
        //
        box.style.borderLeft='10px solid '+hex;
        box.onclick=()=>{
            map.setZoom(14);
            map.panTo([pointData.longitude,pointData.latitude]);
        };
        setTimeout(()=>{
            box.style.opacity='1';
        },600+(i*90));
    };
    static history(map,prompt,hex) {
        let tr=E.tableR(E.get('historyTable'));
        let dot=E.div(E.tableC(tr,'10%'),'historyItemDot','');
        dot.innerHTML='<i class="fa-solid fa-location-dot"></i>';
        dot.style.color=hex;
        dot.onclick=()=>{
            map.panTo(historyData[historyData.findIndex(x=>x.hex===hex)].markers[0].getLngLat());
            E.get('searchCards').innerHTML='';
            historyData[historyData.findIndex(x=>x.hex===hex)].data.forEach((dataPoint,i)=>{
                MapInterface.card(map,dataPoint,hex,i);
            });
        };
        let text=E.div(E.tableC(tr,'80%'),'historyItemText','');
        text.innerHTML=T.s(prompt,15);
        text.title=prompt;
        text.onclick=()=>{
            map.panTo(historyData[historyData.findIndex(x=>x.hex===hex)].markers[0].getLngLat());
            E.get('searchCards').innerHTML='';
            historyData[historyData.findIndex(x=>x.hex===hex)].data.forEach((dataPoint,i)=>{
                MapInterface.card(map,dataPoint,hex,i);
            });
        };
        let rm=E.div(E.tableC(tr,'10%'),'historyItemRm','');
        rm.innerHTML='<i class="fa-solid fa-xmark"></i>';
        rm.onclick=(e)=>{
            I.confirmFloater(e,(c)=>{
                if(c) {
                    E.get('historyTable').deleteRow(tr.rowIndex);
                    for(let i=0;i<historyData[historyData.findIndex(x=>x.hex===hex)].markers.length;i++) {
                        historyData[historyData.findIndex(x=>x.hex===hex)].markers[i].remove();
                    }
                    historyData.splice(historyData.findIndex(x=>x.hex===hex),1);
                }
            });
        };
    };
}
class DiscoverInterface extends I {
    static prompt() {
        popups.forEach((p)=>{
            p.remove();
        });
        let load=E.img(E.get('discoverResultsBox'),'','discoverLoad',rootURL+'/src/loading2.gif');
        A.r('POST','/discover',{latitude:lat,longitude:long,model:selectedModel.value},(error,data)=>{
            if(!error) {
                if(data) {
                    E.get('discoverResultsBox').removeChild(load);
                    let hex='#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');
                    DiscoverInterface.point(lat,long,hex);
                    let item=E.div(E.get('discoverResultsBox'),'discoverItem','');
                    E.div(item,'discoverItemTitle','').innerHTML='<i class="fa-solid fa-location-dot" style="color:'+hex+'"></i> ['+lat+', '+long+']';
                    E.div(item,'discoverItemText','').innerHTML='<pre>'+data+'</pre>';
                    item.scrollIntoView();
                    item.onclick=()=>{
                        map.panTo(discoverHistoryData[discoverHistoryData.findIndex(x=>x.hex===hex)].marker.getLngLat());
                    };
                }
            }
            else I.error(error);
        });
    };
    
    static point(lat,long,hex) {
        let m=new mapboxgl.Marker({color: hex})
            .setLngLat([long,lat])
            .setPopup(new mapboxgl.Popup().setHTML('<div class="pointLatLong">Lat,Long: '+lat+', '+long+'</div>'))
            .addTo(map);
        discoverHistoryData.push({hex:hex,marker:m});
    }
}